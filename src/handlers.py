import os
import traceback
import logging

import database as db

from aiogram import Bot, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from filters import IsAdmin
from keyboards import get_callback_btns
from playerok import Playerok
from utils import reupload_products, autolift_products
from config import admin_list
from cron import scheduler

logger = logging.getLogger(__name__)

router = Router()
router.message.filter(IsAdmin())

playerok = Playerok()


def panel_keyboard() -> dict:
    panel_buttons = {
        "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è üîê": "auth",
        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ ‚úèÔ∏è": "edit_keywords",
        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è ‚úèÔ∏è": "edit_autolift_keywords",
    }

    if scheduler.get_job("reupload_products_job"):
        panel_buttons.update({"‚õî –í–∏–º–∫–Ω—É—Ç–∏ –ø–∞—Ä—Å–µ—Ä ‚õî": "disable_parser"})
    else:
        panel_buttons.update({"‚ñ∂Ô∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–∞—Ä—Å–µ—Ä ‚ñ∂Ô∏è": "enable_parser"})

    if scheduler.get_job("autolift_job"):
        panel_buttons.update({"‚õî –í–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è ‚õî": "disable_autolift"})
    else:
        panel_buttons.update({"‚ñ∂Ô∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è ‚ñ∂Ô∏è": "enable_autolift"})

    return panel_buttons


@router.message(CommandStart())
async def panel(message: Message, state: FSMContext, session: AsyncSession):
    try:
        await state.clear()

        # Check if the user exists in the database
        tg_id = str(message.from_user.id)
        username = message.from_user.username
        user = await db.orm_read(session, db.User, as_iterable=False, tg_id=tg_id)

        if not user:
            result = await db.orm_create(
                session, db.User, {"tg_id": tg_id, "username": username}
            )

            if result:
                user = await db.orm_read(
                    session, db.User, as_iterable=False, tg_id=tg_id
                )

        await message.answer(
            "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è",
            reply_markup=get_callback_btns(btns=panel_keyboard(), sizes=(1,)),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "panel")
async def callback_panel(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è",
            reply_markup=get_callback_btns(btns=panel_keyboard(), sizes=(1,)),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


class AuthState(StatesGroup):
    email = State()
    code = State()


@router.callback_query(F.data == "auth")
async def auth(callback: CallbackQuery, state: FSMContext):
    try:
        if scheduler.get_job("reupload_products_job"):
            await callback.answer(
                "‚ùå –ü–∞—Ä—Å–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –í–∏–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é."
            )
            return

        if os.path.exists(playerok.storage_cookies_path):
            btns = {
                "‚úÖ –¢–∞–∫": "auth_update",
                "‚ùå –ù—ñ": "panel",
            }
            await callback.message.edit_text(
                "‚ùå –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –•–æ—á–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç?",
                reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
            )
        else:
            await callback.message.edit_text(
                "üîê –í–≤–µ–¥—ñ—Ç—å email –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞ Playerok:"
            )
            await state.set_state(AuthState.email)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "auth_update")
async def auth_update(callback: CallbackQuery, state: FSMContext):
    try:
        if os.path.exists(playerok.storage_cookies_path):
            os.remove(playerok.storage_cookies_path)

        await callback.message.edit_text(
            "üîê –í–≤–µ–¥—ñ—Ç—å email –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞ Playerok:"
        )
        await state.set_state(AuthState.email)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.message(AuthState.email)
async def auth_email(message: Message, state: FSMContext):
    try:
        email = message.text.strip()
        if not email:
            await message.answer("‚ùå Email –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return

        result = playerok.get_email_auth_code(email)

        if not result:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ SMS –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:")
        await state.update_data(email=email)
        await state.set_state(AuthState.code)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.message(AuthState.code)
async def auth_code(message: Message, state: FSMContext, session: AsyncSession):
    try:
        code = message.text.strip()
        data = await state.get_data()
        email = data.get("email", None)

        if not code:
            await message.answer("‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return

        print(f"Email: {email}, Code: {code}")  # Debugging line
        result = playerok.verify_email_code(email, code)

        if not result:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥.")
            return
        else:
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
            await panel(message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "enable_parser")
async def enable_parser(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    bot: Bot,
):
    try:
        if scheduler.get_job("reupload_products_job"):
            await callback.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
            return
        else:
            await callback.message.edit_text("üîê –ü—Ä–æ–≤—ñ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é...")
            if not os.path.exists(playerok.storage_cookies_path):
                await callback.message.answer(
                    "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
                )
                return

            await callback.message.answer("üöÄ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π")

            keywords = await db.orm_read(session, db.Keyword, as_iterable=True)
            if not keywords:
                await callback.message.answer(
                    "‚ùå –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —ó—Ö."
                )
                return

            keywords = [keyword.keyword for keyword in keywords]
            admin_ids = admin_list.split(",")

            scheduler.add_job(
                reupload_products,
                "interval",
                minutes=3,
                id="reupload_products_job",
                args=[playerok, keywords, bot, admin_ids],
                replace_existing=True,
            )

        await panel(callback.message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "disable_parser")
async def disable_parser(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        job = scheduler.get_job("reupload_products_job")
        if not job:
            await callback.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –≤–∂–µ –≤–∏–º–∫–Ω–µ–Ω–æ.")
            return
        else:
            scheduler.remove_job("reupload_products_job")
            await callback.answer("–ü–∞—Ä—Å–µ—Ä –≤–∏–º–∫–Ω–µ–Ω–æ ‚ùå")

        await panel(callback.message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "edit_keywords")
async def edit_keywords(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        keyword_list = await db.orm_read(session, db.Keyword, as_iterable=True)
        keyword_buttons = {
            "‚ûï –î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞": "add_keywords",
            "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞": "delete_keywords",
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "panel",
        }
        message_text = "üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ üîë\n\n"

        if keyword_list:
            for keyword in keyword_list:
                message_text += f"{keyword.keyword}\n"

        await callback.message.edit_text(
            message_text,
            reply_markup=get_callback_btns(btns=keyword_buttons, sizes=(1,)),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


class EditKeywordsState(StatesGroup):
    keyword = State()


@router.callback_query(F.data == "add_keywords")
async def edit_keywords(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "üîë –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É (—á–µ—Ä–µ–∑ –∫–æ–º—É):"
        )
        await state.set_state(EditKeywordsState.keyword)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.message(EditKeywordsState.keyword)
async def set_keywords(message: Message, state: FSMContext, session: AsyncSession):
    try:
        keywords = message.text.split(",")
        keywords = [keyword.strip() for keyword in keywords if keyword.strip()]

        if not keywords:
            await message.answer("‚ùå –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏.")
            return

        for keyword in keywords:
            result = await db.orm_create(session, db.Keyword, {"keyword": keyword})
            if not result:
                await message.answer(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {keyword}"
                )
                return

        await message.answer(f"‚úÖ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {', '.join(keywords)}")

        await state.clear()
        await panel(message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "delete_keywords")
async def delete_keywords(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        keyword_list = await db.orm_read(session, db.Keyword, as_iterable=True)
        if not keyword_list:
            await callback.answer("‚ùå –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚ùå")
            return

        btns = {
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "edit_keywords",
        }

        for keyword in keyword_list:
            btns[keyword.keyword] = f"delete_keyword_{keyword.pk}"

        await callback.message.edit_text(
            "üëá –í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è üëá",
            reply_markup=get_callback_btns(
                btns=btns,
                sizes=(1,),
            ),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data.startswith("delete_keyword_"))
async def delete_keyword(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        pk = int(callback.data.split("_")[-1])
        result = await db.orm_delete(session, db.Keyword, pk)
        if result:
            await callback.answer("‚úÖ –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞")

        keywords = await db.orm_read(session, db.Keyword, as_iterable=True)
        if not keywords:
            await callback.message.edit_text(
                "‚ùå –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è ‚ùå",
                reply_markup=get_callback_btns(
                    btns={"‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "edit_autolift_keywords"},
                    sizes=(1,),
                ),
            )
            return

        await delete_keywords(callback, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "edit_autolift_keywords")
async def edit_autolift_keywords(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        autolift_keywords = await db.orm_read(
            session, db.AutoliftKeyword, as_iterable=True
        )
        autolift_buttons = {
            "‚ûï –î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è": "add_autolift_keywords",
            "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è": "delete_autolift_keywords",
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "panel",
        }
        message_text = "üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è üîë\n\n"

        if autolift_keywords:
            for keyword in autolift_keywords:
                message_text += f"{keyword.keyword}: <i>{keyword.position}</i>\n"

        await callback.message.edit_text(
            message_text,
            reply_markup=get_callback_btns(btns=autolift_buttons, sizes=(1,)),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


class EditAutoliftKeywordsState(StatesGroup):
    keyword = State()


@router.callback_query(F.data == "add_autolift_keywords")
async def add_autolift_keywords(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            'üîë –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è\n–ü—Ä–∏–∫–ª–∞–¥: "–∞–∫—Ü—ñ—è: 200, –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ: 150, –æ—Å–æ–±–ª–∏–≤–∏–π —Ä–æ–∑–ø—Ä–æ–¥–∞–∂: 50"'
        )
        await state.set_state(EditAutoliftKeywordsState.keyword)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.message(EditAutoliftKeywordsState.keyword)
async def set_autolift_keywords(
    message: Message, state: FSMContext, session: AsyncSession
):
    try:
        keywords = message.text.split(",")
        keywords = [keyword.strip() for keyword in keywords if keyword.strip()]

        if not keywords:
            await message.answer("‚ùå –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏.")
            return

        for keyword in keywords:
            parts = keyword.split(":")
            if len(parts) != 2:
                await message.answer(
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {keyword}"
                )
                return

            kw, position = parts[0].strip().lower(), int(parts[1].strip())
            result = await db.orm_create(
                session, db.AutoliftKeyword, {"keyword": kw, "position": position}
            )
            if not result:
                await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {kw}")
                return

        await message.answer(
            f"‚úÖ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {', '.join(keywords)}"
        )

        await state.clear()
        await panel(message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç."
        )


@router.callback_query(F.data == "delete_autolift_keywords")
async def delete_autolift_keywords(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        autolift_keywords = await db.orm_read(
            session, db.AutoliftKeyword, as_iterable=True
        )
        if not autolift_keywords:
            await callback.answer("‚ùå –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è ‚ùå")
            return

        btns = {
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "edit_autolift_keywords",
        }

        for keyword in autolift_keywords:
            btns[keyword.keyword] = f"delete_autolift_keyword_{keyword.pk}"

        await callback.message.edit_text(
            "üëá –í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è üëá",
            reply_markup=get_callback_btns(
                btns=btns,
                sizes=(1,),
            ),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data.startswith("delete_autolift_keyword_"))
async def delete_autolift_keyword(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        pk = int(callback.data.split("_")[-1])
        result = await db.orm_delete(session, db.AutoliftKeyword, pk)
        if result:
            await callback.answer("‚úÖ –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è –≤–∏–¥–∞–ª–µ–Ω–æ")
        else:
            await callback.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è"
            )

        autolift_keywords = await db.orm_read(
            session, db.AutoliftKeyword, as_iterable=True
        )
        if not autolift_keywords:
            await callback.message.edit_text(
                "‚ùå –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è ‚ùå",
                reply_markup=get_callback_btns(
                    btns={"‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "edit_autolift_keywords"},
                    sizes=(1,),
                ),
            )
            return

        await delete_autolift_keywords(callback, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "enable_autolift")
async def enable_autolift(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    bot: Bot,
):
    try:
        if scheduler.get_job("autolift_job"):
            await callback.answer("‚ùå –ê–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
            return
        else:
            await callback.message.edit_text("üîê –ü—Ä–æ–≤—ñ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é...")

            if not os.path.exists(playerok.storage_cookies_path):
                await callback.message.answer(
                    "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
                )
                return

            await callback.message.answer("üöÄ –ê–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è –∑–∞–ø—É—â–µ–Ω–æ")

            autolift_keywords = await db.orm_read(
                session, db.AutoliftKeyword, as_iterable=True
            )
            if not autolift_keywords:
                await callback.message.answer(
                    "‚ùå –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —ó—Ö."
                )
                return

            autolift_keywords = [
                {"keyword": kw.keyword, "position": kw.position}
                for kw in autolift_keywords
            ]
            admin_ids = admin_list.split(",")

            scheduler.add_job(
                autolift_products,
                "interval",
                minutes=5,
                id="autolift_job",
                args=[playerok, autolift_keywords, bot, admin_ids],
                replace_existing=True,
            )

        await panel(callback.message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "disable_autolift")
async def disable_autolift(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        job = scheduler.get_job("autolift_job")
        if not job:
            await callback.answer("‚ùå –ê–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è –≤–∂–µ –≤–∏–º–∫–Ω–µ–Ω–æ.")
            return
        else:
            scheduler.remove_job("autolift_job")
            await callback.answer("–ê–≤—Ç–æ–ø—ñ–¥–Ω—è—Ç—Ç—è –≤–∏–º–∫–Ω–µ–Ω–æ ‚ùå")

        await panel(callback.message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")
