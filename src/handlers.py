import json
import asyncio
import os
import traceback
import logging

import database as db

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from filters import IsAdmin
from keyboards import get_callback_btns
from playerok import Playerok
from utils import reupload_products

logger = logging.getLogger(__name__)

router = Router()
router.message.filter(IsAdmin())

playerok = Playerok()

parser_taks = None


def panel_keyboard() -> dict:
    panel_buttons = {
        "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è üîê": "auth",
        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ ‚úèÔ∏è": "edit_keywords",
    }

    if parser_taks and not parser_taks.done():
        panel_buttons.update({"‚õî –í–∏–º–∫–Ω—É—Ç–∏ –ø–∞—Ä—Å–µ—Ä ‚õî": "disable_parser"})
    else:
        panel_buttons.update({"‚ñ∂Ô∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–∞—Ä—Å–µ—Ä ‚ñ∂Ô∏è": "enable_parser"})

    return panel_buttons


@router.message(CommandStart())
async def panel(message: Message, state: FSMContext, session: AsyncSession):
    try:
        await state.clear()

        # Check if the user exists in the database
        tg_id = str(message.from_user.id)
        username = message.from_user.username
        user = await db.orm_read(session, db.User, as_iterable=False, tg_id=tg_id)

        if not user:
            result = await db.orm_create(
                session, db.User, {"tg_id": tg_id, "username": username}
            )

            if result:
                user = await db.orm_read(
                    session, db.User, as_iterable=False, tg_id=tg_id
                )

        await message.answer(
            "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è",
            reply_markup=get_callback_btns(btns=panel_keyboard(), sizes=(1,)),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "panel")
async def callback_panel(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è",
            reply_markup=get_callback_btns(btns=panel_keyboard(), sizes=(1,)),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


class AuthState(StatesGroup):
    email = State()
    code = State()


@router.callback_query(F.data == "auth")
async def auth(callback: CallbackQuery, state: FSMContext):
    try:
        if parser_taks and not parser_taks.done():
            await callback.answer(
                "‚ùå –ü–∞—Ä—Å–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –í–∏–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é."
            )
            return

        if os.path.exists(playerok.storage_state_path):
            btns = {
                "‚úÖ –¢–∞–∫": "auth_update",
                "‚ùå –ù—ñ": "panel",
            }
            await callback.message.edit_text(
                "‚ùå –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –•–æ—á–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç?",
                reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
            )
        else:
            await callback.message.edit_text(
                "üîê –í–≤–µ–¥—ñ—Ç—å email –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞ Playerok:"
            )
            await state.set_state(AuthState.email)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "auth_update")
async def auth_update(callback: CallbackQuery, state: FSMContext):
    try:
        if os.path.exists(playerok.storage_state_path):
            os.remove(playerok.storage_state_path)

        await callback.message.edit_text(
            "üîê –í–≤–µ–¥—ñ—Ç—å email –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞ Playerok:"
        )
        await state.set_state(AuthState.email)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.message(AuthState.email)
async def auth_email(message: Message, state: FSMContext):
    try:
        email = message.text.strip()
        if not email:
            await message.answer("‚ùå Email –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return

        await playerok.initialize_browser()
        result = await playerok.auth_first(email)

        if result == "email":
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email.")
            return
        elif result == "repeat":
            await message.answer(
                "‚ùå –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
            return

        if not playerok.page:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±—Ä–∞—É–∑–µ—Ä–∞.")
            return

        await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ SMS –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:")
        await state.set_state(AuthState.code)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.message(AuthState.code)
async def auth_code(message: Message, state: FSMContext, session: AsyncSession):
    try:
        code = message.text.strip()
        if not code:
            await message.answer("‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return

        await playerok.auth_second(code)
        if not playerok.page:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.")
            return

        await playerok.initialize_browser()
        if await playerok.check_auth():
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
            await panel(message, state, session)
        else:
            await message.answer("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ.")
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "enable_parser")
async def enable_parser(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        global parser_taks

        if parser_taks and not parser_taks.done():
            await callback.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
            return
        else:
            await callback.message.edit_text("üîê –ü—Ä–æ–≤—ñ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é...")
            if not os.path.exists(playerok.storage_state_path):
                await callback.message.answer(
                    "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
                )
                return
            
            await playerok.initialize_browser()
            if not await playerok.check_auth():
                await callback.message.answer(
                    "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
                )
                return
            await callback.message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —î, –ø—Ä–æ–¥–æ–≤–∂—É—é...")

            await callback.message.answer("üîÑ –í–∏–∫–æ–Ω—É—é —Ñ—ñ–∫—Å—É–≤–∞–Ω–Ω—è –Ω–∞—è–≤–Ω–∏—Ö –∫–∞—Ä—Ç...")
            if os.path.exists("src/storage/fix_cards.json"):
                os.remove("src/storage/fix_cards.json")

            await playerok.initialize_browser()
            fix_cards = await playerok.get_cards()
            fix_cards_urls = [url for _, url in fix_cards]

            with open("src/storage/fix_cards.json", "w", encoding="utf-8") as f:
                json.dump(fix_cards_urls, f, ensure_ascii=False, indent=4)

            await callback.message.answer("‚úÖ –§—ñ–∫—Å—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ")
            await callback.message.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...")

            parser_taks = asyncio.create_task(
                reupload_products(playerok, session, callback.message)
            )
            await callback.message.edit_text("‚úÖ –ü–∞—Ä—Å–µ—Ä —É–≤—ñ–º–∫–Ω–µ–Ω–æ")

        await panel(callback.message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "disable_parser")
async def disable_parser(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        global parser_taks
        if not parser_taks or parser_taks.done():
            await callback.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –≤–∂–µ –≤–∏–º–∫–Ω–µ–Ω–æ.")
            return
        else:
            parser_taks.cancel()
            parser_taks = None

            await callback.message.edit_text("–ü–∞—Ä—Å–µ—Ä –≤–∏–º–∫–Ω–µ–Ω–æ ‚ùå")

        await panel(callback.message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "edit_keywords")
async def edit_keywords(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        keyword_list = await db.orm_read(session, db.Keyword, as_iterable=True)
        keyword_buttons = {
            "‚ûï –î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞": "add_keywords",
            "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞": "delete_keywords",
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "panel",
        }
        message_text = "üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ üîë\n\n"

        if keyword_list:
            for keyword in keyword_list:
                message_text += f"{keyword.keyword}\n"

        await callback.message.edit_text(
            message_text,
            reply_markup=get_callback_btns(btns=keyword_buttons, sizes=(1,)),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


class EditKeywordsState(StatesGroup):
    keyword = State()


@router.callback_query(F.data == "add_keywords")
async def edit_keywords(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "üîë –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É (—á–µ—Ä–µ–∑ –∫–æ–º—É):"
        )
        await state.set_state(EditKeywordsState.keyword)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.message(EditKeywordsState.keyword)
async def set_keywords(message: Message, state: FSMContext, session: AsyncSession):
    try:
        keywords = message.text.split(",")
        keywords = [keyword.strip() for keyword in keywords if keyword.strip()]

        if not keywords:
            await message.answer("‚ùå –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏.")
            return

        for keyword in keywords:
            result = await db.orm_create(session, db.Keyword, {"keyword": keyword})
            if not result:
                await message.answer(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {keyword}"
                )
                return

        await message.answer(f"‚úÖ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {', '.join(keywords)}")

        await state.clear()
        await panel(message, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data == "delete_keywords")
async def delete_keywords(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        keyword_list = await db.orm_read(session, db.Keyword, as_iterable=True)
        if not keyword_list:
            await callback.answer("‚ùå –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚ùå")
            return

        btns = {
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "edit_keywords",
        }

        for keyword in keyword_list:
            btns[keyword.keyword] = f"delete_keyword_{keyword.pk}"

        await callback.message.edit_text(
            "üëá –í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è üëá",
            reply_markup=get_callback_btns(
                btns=btns,
                sizes=(1,),
            ),
        )
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.callback_query(F.data.startswith("delete_keyword_"))
async def delete_keyword(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    try:
        pk = int(callback.data.split("_")[-1])
        result = await db.orm_delete(session, db.Keyword, pk)
        if result:
            await callback.answer("‚úÖ –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞")

        await delete_keywords(callback, state, session)
    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


@router.message(Command("cards"))
async def get_cards(message: Message, state: FSMContext, session: AsyncSession):
    try:
        await playerok.initialize_browser()
        cards = await playerok.get_cards()
        if not cards:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç–∏.")
            return

        keywords = await db.orm_read(session, db.Keyword, as_iterable=True)

        if keywords:
            cards = [
                card
                for card in cards
                if any(keyword.keyword in card for keyword in keywords)
            ]
            if not cards:
                await message.answer(
                    "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º."
                )
                return

    except Exception as e:
        logger.error(f"Short error message: {e}")
        logger.error(traceback.format_exc())
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")
